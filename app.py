import streamlit as st
import requests
from fpdf import FPDF
import tempfile
import os

# ------------------- Config -------------------
st.set_page_config(page_title="AutoBio-X", layout="centered")

BASE_API = "https://autobio-x.onrender.com"

# ------------------- UI Header -------------------
st.image("logo.png", width=220)
st.title("üß¨ AutoBio-X: Gene Explorer & Drug Matcher")

st.markdown("""
A real-time AI-powered tool to explore gene expression, mutation impact, and targeted drug matches in breast cancer.
""")

# ------------------- API Connectors -------------------

def get_expression_data(gene):
    try:
        r = requests.get(f"{BASE_API}/expression/{gene}")
        return r.json().get("expression", {})
    except:
        return {"error": "Failed to fetch expression data."}

def get_mutation_data(gene):
    try:
        r = requests.get(f"{BASE_API}/mutation/{gene}")
        return r.json()
    except:
        return [{"error": "Failed to fetch mutation data."}]

def get_drug_data(gene):
    try:
        r = requests.get(f"{BASE_API}/drugs/{gene}")
        return r.json()
    except:
        return [{"error": "Failed to fetch drug data."}]

# ------------------- Gene Input -------------------

gene = st.text_input("üîç Enter Gene Symbol (e.g., TP53, BRCA1)").strip().upper()

 # Clean invalid characters for PDF
def safe_text(text):
    return str(text).encode('latin1', 'ignore').decode('latin1')

# -------- Inside Gene Query Section --------

# üîí PREVENT "Not defined" error by initializing safely
expr, muts, drugs = {}, [{"error": "Not fetched"}], [{"error": "Not fetched"}]

if gene:
    # Expression
    st.subheader("üìä Expression Data")
    expr = get_expression_data(gene)
    if "error" in expr:
        st.warning(expr["error"])
    else:
        st.json(expr)

    # Mutation
    st.subheader("üß¨ Mutation Info")
    muts = get_mutation_data(gene)
    if isinstance(muts, list) and "error" in muts[0]:
        st.warning(muts[0]["error"])
    else:
        st.json(muts)

    # Drug
    st.subheader("üíä Drug Matches")
    drugs = get_drug_data(gene)
    if isinstance(drugs, list) and "error" in drugs[0]:
        st.warning(drugs[0]["error"])
    else:
        st.json(drugs)

    # ‚úÖ PDF Generator (safe & final)
    expression_ok = expr and isinstance(expr, dict) and "error" not in expr
    mutation_ok = muts and isinstance(muts, list) and "error" not in muts[0]
    drug_ok = drugs and isinstance(drugs, list) and "error" not in drugs[0]

     if expression_ok and mutation_ok and drug_ok:
    # ... PDF code here ...

def safe_text(text):
    return str(text).encode('latin1', 'ignore').decode('latin1')

    if st.button("üì• Download Report as PDF"):
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=14)
        pdf.cell(200, 10, txt=safe_text(f"Gene Report: {gene}"), ln=True, align='C')
        pdf.ln(10)

        # Expression Table
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(200, 10, txt="üìä Expression Data", ln=True)
        pdf.set_font("Arial", '', 12)
        for sample, value in expr.items():
            pdf.cell(0, 10, txt=safe_text(f"{sample}: {value}"), ln=True)

        pdf.ln(5)

        # Mutation Info
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(200, 10, txt="üß¨ Mutation Info", ln=True)
        pdf.set_font("Arial", '', 12)
        for mut in muts:
            for k, v in mut.items():
                pdf.cell(0, 10, txt=safe_text(f"{k}: {v}"), ln=True)
            pdf.ln(3)

        # Drug Matches
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(200, 10, txt="üíä Drug Matches", ln=True)
        pdf.set_font("Arial", '', 12)
        for drug in drugs:
            for k, v in drug.items():
                pdf.cell(0, 10, txt=safe_text(f"{k}: {v}"), ln=True)
            pdf.ln(3)

        # Footer
        pdf.ln(10)
        pdf.set_font("Arial", 'I', 10)
        pdf.set_text_color(100, 100, 100)
        pdf.cell(200, 10, txt=safe_text("Generated by Syeda Rehmat ‚Äî Founder, BioZero"), ln=True, align='C')

        # Save and download
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmpfile:
            pdf.output(tmpfile.name)
            with open(tmpfile.name, "rb") as f:
                st.download_button(
                    label="‚¨áÔ∏è Download PDF Report",
                    data=f,
                    file_name=f"{gene}_AutoBioX_Report.pdf",
                    mime="application/pdf"
                )
            os.unlink(tmpfile.name)



             
# ------------------- Footer -------------------
st.markdown("""
<hr style='border: 1px solid #ddd;'>
<div style="text-align: center; color: gray;">
    Created by <b>Syeda Rehmat</b> ‚Äî Founder, <i>BioZero</i>
</div>
""", unsafe_allow_html=True)
